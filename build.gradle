plugins {
    id 'java'
    id 'com.github.spotbugs' version '5.0.6'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'org.sonarqube' version '3.3'
}

group 'io.github.mfvanek'
version '0.5.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    mavenCentral()
}

def junitVersion = '5.8.2'
dependencies {
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'io.github.mfvanek:pg-index-health:0.5.0'
    implementation 'org.postgresql:postgresql:42.3.4'
    implementation('io.zonky.test:embedded-postgres:1.3.1') {
        exclude module: 'org.postgresql:postgresql'
    }
    implementation enforcedPlatform('io.zonky.test.postgres:embedded-postgres-binaries-bom:13.2.0')
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.liquibase:liquibase-core:4.10.0'
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'javax.activation:activation:1.1.1'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        html.enabled = true
    }
}
spotbugs {
    showProgress = true
    excludeFilter = file("config/spotbugs/exclude.xml")
}

checkstyle {
    toolVersion '8.45'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 4
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 17
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 76
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.34
            }
        }
    }
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

pmd {
    consoleOutput = true
    toolVersion = "6.42.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health-demo"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
